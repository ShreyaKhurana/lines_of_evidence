mu_hat[t] = sum(wt[, t+1]*mu[, t+1]) / sum(wt[, t+1])
}
mu_hat
m = 10000
mu = matrix(0,nrow = m, ncol =11) #given initial mu is 0
wt_matrix = matrix(1,nrow = m, ncol = 11)
mu_hat = matrix(0L,nrow = 1,ncol = 10) #initialise the weights with 1
y = c(0.2,-0.1,-0.4,-1.3,1.1,-1.1,1.1,-0.1,-2.4,0.9)
for (i in c(1:10)){
index_val = rbinom(m, size = 1, prob = 0.9)
mu[,i+1] = mu[,i]*index_val + rnorm(m,mean = 0, sd = 1)*(1-index_val)
wt_matrix[,i+1] = wt_matrix[,i]*dnorm(y[i],mean = mu[,i+1],sd = 1)#update weight matrix
mu_hat[i] = sum(mu[,i+1]*wt_matrix[,i+1])/sum(wt_matrix[,i+1])
}
#following are the estimated
mu_hat
a =
1
;
a = 1
;;
T0 = read.csv('table.txt', sep = ',', header = FALSE, stringsAsFactors = FALSE)
helo
T0 = read.csv('table.txt', sep = ',', header = FALSE, stringsAsFactors = FALSE)
T0 = T0[,2:13]
N = 10000
num_accepted = 0
# Store log of factorial of T0
log_pi_T0 = -sum(log(factorial(T0)))
while (num_accepted <= N) {
rows = sample(1:12,2)
cols = sample(1:12,2)
r1 = min(rows)
r2 = max(rows)
c1 = min(cols)
c2 = max(cols)
T.table = T0
r = runif(1)
if (r <= 0.5) {
T.table[r1,c1] = T0[r1,c1] + 1
T.table[r1,c2] = T0[r1,c2] - 1
T.table[r2,c1] = T0[r2,c1] - 1
T.table[r2,c2] = T0[r2,c2] + 1
} else {
T.table[r1,c1] = T0[r1,c1] - 1
T.table[r1,c2] = T0[r1,c2] + 1
T.table[r2,c1] = T0[r2,c1] + 1
T.table[r2,c2] = T0[r2,c2] - 1
}
if (min(c(T.table[r1,c1], T.table[r1,c2], T.table[r2,c1], T.table[r2,c2])) >= 0) {
log_pi_T[num_accepted] = -sum(log(factorial(T.table)))
num_accepted = num_accepted+1
}
# print(T.table)
}
# Store log of factorial of T0
log_pi_T0 = -sum(log(factorial(T0)))
# Array for storing other log factorials of tables generated
log_pi_T = rep(NA, N)
while (num_accepted <= N) {
rows = sample(1:12,2)
cols = sample(1:12,2)
r1 = min(rows)
r2 = max(rows)
c1 = min(cols)
c2 = max(cols)
T.table = T0
r = runif(1)
if (r <= 0.5) {
T.table[r1,c1] = T0[r1,c1] + 1
T.table[r1,c2] = T0[r1,c2] - 1
T.table[r2,c1] = T0[r2,c1] - 1
T.table[r2,c2] = T0[r2,c2] + 1
} else {
T.table[r1,c1] = T0[r1,c1] - 1
T.table[r1,c2] = T0[r1,c2] + 1
T.table[r2,c1] = T0[r2,c1] + 1
T.table[r2,c2] = T0[r2,c2] - 1
}
if (min(c(T.table[r1,c1], T.table[r1,c2], T.table[r2,c1], T.table[r2,c2])) >= 0) {
log_pi_T[num_accepted] = -sum(log(factorial(T.table)))
num_accepted = num_accepted+1
}
# print(T.table)
}
p_value = mean(log_pi_T <= log_pi_T0)
p_value
arr = as.integer(log_pi_T <= log_pi_T0)
# Std error
sqrt(var(arr)*(2*sum(acf(arr)$acf) + 1) / 10000)
pwd
cwd
library(spNNGP)
library(raster)
library(rgdal)
library(MASS)
# Load genetic data
gen.data <- data.frame(read_excel("./Data for alnus integrative model/Genetic_Data_For_Integrative_Model.xlsx"))
# Load genetic data
gen.data <- data.frame(read.csv("./Data for alnus integrative model/Genetic_Data_For_Integrative_Model.xlsx"))
# Load genetic data
gen.data <- data.frame(read.csv("~/Data for alnus integrative model/Genetic_Data_For_Integrative_Model.xlsx"))
# Load genetic data
gen.data <- data.frame(read.csv("./Data for alnus integrative model/Genetic_Data_For_Integrative_Model.xlsx"))
dir
gtwd
getwd
getwd()
# Load genetic data
gen.data <- data.frame(read.csv("./Data for alnus integrative model/Data for alnus integrative model/Genetic_Data_For_Integrative_Model.xlsx"))
gen.data
# Load genetic data
gen.data <- data.frame(read.csv2("./Data for alnus integrative model/Data for alnus integrative model/Genetic_Data_For_Integrative_Model.xlsx"))
gen.data
dim(alpha0)
library(raster)
library(rgdal)
library(MASS)
# Load genetic data
gen.data <- data.frame(readxl::read_excel("Data for alnus integrative model/Genetic_Data_For_Integrative_Model.xlsx"))
coord.g <- subset(gen.data, select=c(lat, long))
n.g <- 47
set.seed(2)
# x.g <-
# n.g <- nrow(gen.data)
colnames(coord.g) <- c('lat', 'lon')
# Load sdm data
r <- raster("Data for alnus integrative model/FRU_lgmEM.asc.txt")
r.pts <- rasterToPoints(r, spatial = TRUE)
r.df <- data.frame(r.pts)
# n.m <- nrow(r.df)
n.m <- 500
# Choose k rows
# k <- 1000
set.seed(3)
r.df <- r.df[sample(nrow(r.df), n.m), ]
coord.m <- subset(r.df, select=c(y,x))
# x.m <- rnorm(n.m)
# x.m <- r.df$scaled
# n.m <- nrow(r.df)
colnames(coord.m) <- c('lat', 'lon')
# # Load Pollen data
pol.data <- data.frame(readxl::read_excel('Data for alnus integrative model/Pollen_Data_For_Inegrative_Model_v2.xlsx'))
pol.data <- subset(pol.data, Pollen.Data != 0)
coord.p <- subset(pol.data, select=c(Latitude, Longitude))
# x.p <- qnorm(pol.data$Pollen.Data)
# x.p <- as.matrix(x.p)
# n.p <- nrow(pol.data)
n.p <- 13
colnames(coord.p) <- c('lat', 'lon')
# colnames(x.p) <- c('pr')
# x.p <- rnorm(n.p)
# Union of all coordinates
n <- n.p + n.m + n.g
coords <- rbind(coord.m, coord.g, coord.p)
n
# x.m[1:n.m] =
# M, G, P matrices
M <- diag(n)
G <- M
P <- M
# Initial values
tt <- 100000
tau <- 25
a <- 0.1
b <- 0.1
#w <- 4
A <- 0.1
B <- 5
phi_sd <- 0.2
#mu <- matrix(0, nrow = tt, ncol = 1)
mu <- 0
beta0 <- matrix(0, nrow = tt, ncol = 1)
beta1 <- matrix(0, nrow = tt, ncol = 1)
alpha0 <- matrix(0, nrow = tt, ncol = 1)
alpha1 <- matrix(0, nrow = tt, ncol = 1)
gamma0 <- matrix(0, nrow = tt, ncol = 1)
gamma1 <- matrix(0, nrow = tt, ncol = 1)
sigma2.m <- matrix(0, nrow = tt, ncol = 1)
sigma2.g <- matrix(0, nrow = tt, ncol = 1)
sigma2.p <- matrix(0, nrow = tt, ncol = 1)
sigma.2 <- matrix(0, nrow = tt, ncol = 1)
phi <- matrix(0.25, nrow = tt, ncol = 1)
beta0[1] <- 0
alpha0[1] <- 0
gamma0[1] <- 0
beta1[1] <- 1
alpha1[1] <- 1
gamma1[1] <- 1
sigma2.m[1] <- 1
sigma2.g[1] <- 1
sigma2.p[1] <- 1
sigma.2[1] <- 1
x <- matrix(0, nrow = n, ncol = tt)
#phi[1] <-  runif(1, A, B)
corr = 0.826
# Some helper functions
x.dist <- as.matrix(dist(coords))
minx = min(x.dist)
rangex = diff(range(x.dist))
x.dist <- apply(x.dist, MARGIN = 1, FUN = function(X) (X - minx)/rangex)
V <- function(phi) {return(exp(-x.dist/phi) + corr*diag(n))}
Sigma.inv <- function(sigma.2, V) {return(solve(sigma.2*V))}
# Simulate actual data here
beta0.a <- 1
beta1.a <- 3
alpha0.a <- 1
alpha1.a <- 3
gamma0.a <- 1
gamma1.a <- 3
phi.a <- 0.25
sigma2.a <- 6
sigma2g.a <- 5
sigma2m.a <- 4
sigma2p.a <- 8
x.a <- mvrnorm(mu = rep(0,n), Sigma = sigma2.a*exp(-x.dist/phi.a) )
x.m <- beta0.a + beta1.a*x.a + rnorm(nrow(M), mean = 0, sd = sqrt(sigma2m.a))
x.g <- alpha0.a + alpha1.a*x.a + rnorm(nrow(G), mean = 0, sd = sqrt(sigma2g.a))
x.p <- gamma0.a + gamma1.a*x.a + rnorm(nrow(P), mean = 0, sd = sqrt(sigma2p.a))
n
dim(x.dist)
dim(coords)
coord.p <- subset(pol.data, select=c(Latitude, Longitude))
coords <- rbind(coord.m, coord.g, coord.p)
coord.g <- subset(gen.data, select=c(lat, long))
# x.g <-
# n.g <- nrow(gen.data)
colnames(coord.g) <- c('lat', 'lon')
coord.m <- subset(r.df, select=c(y,x))
# x.m <- rnorm(n.m)
# x.m <- r.df$scaled
# n.m <- nrow(r.df)
colnames(coord.m) <- c('lat', 'lon')
coord.p <- subset(pol.data, select=c(Latitude, Longitude))
colnames(coord.p) <- c('lat', 'lon')
coords <- rbind(coord.m, coord.g, coord.p)
dim(coords)
getwd()
setwd("C:/Users/shrey/Downloads/Papa/lines_of_evidence/")
# Load genetic data
gen.data <- data.frame(readxl::read_excel("Data for alnus integrative model/Genetic_Data_For_Integrative_Model.xlsx"))
coord.g <- subset(gen.data, select=c(lat, long))
n.g <- 47
set.seed(2)
# x.g <-
# n.g <- nrow(gen.data)
colnames(coord.g) <- c('lat', 'lon')
# Load sdm data
r <- raster("Data for alnus integrative model/FRU_lgmEM.asc.txt")
r.pts <- rasterToPoints(r, spatial = TRUE)
r.df <- data.frame(r.pts)
# n.m <- nrow(r.df)
n.m <- 500
# Choose k rows
# k <- 1000
set.seed(3)
r.df <- r.df[sample(nrow(r.df), n.m), ]
coord.m <- subset(r.df, select=c(y,x))
# x.m <- rnorm(n.m)
# x.m <- r.df$scaled
# n.m <- nrow(r.df)
colnames(coord.m) <- c('lat', 'lon')
# # Load Pollen data
pol.data <- data.frame(readxl::read_excel('Data for alnus integrative model/Pollen_Data_For_Inegrative_Model_v2.xlsx'))
pol.data <- subset(pol.data, Pollen.Data != 0)
coord.p <- subset(pol.data, select=c(Latitude, Longitude))
# x.p <- qnorm(pol.data$Pollen.Data)
# x.p <- as.matrix(x.p)
# n.p <- nrow(pol.data)
n.p <- 13
colnames(coord.p) <- c('lat', 'lon')
# colnames(x.p) <- c('pr')
# x.p <- rnorm(n.p)
# Union of all coordinates
n <- n.p + n.m + n.g
coords <- rbind(coord.m, coord.g, coord.p)
n
dim(coords)
# x.m[1:n.m] =
# M, G, P matrices
M <- diag(n)
G <- M
P <- M
# Initial values
tt <- 100000
tau <- 25
a <- 0.1
b <- 0.1
#w <- 4
A <- 0.1
B <- 5
phi_sd <- 0.2
#mu <- matrix(0, nrow = tt, ncol = 1)
mu <- 0
beta0 <- matrix(0, nrow = tt, ncol = 1)
beta1 <- matrix(0, nrow = tt, ncol = 1)
alpha0 <- matrix(0, nrow = tt, ncol = 1)
alpha1 <- matrix(0, nrow = tt, ncol = 1)
gamma0 <- matrix(0, nrow = tt, ncol = 1)
sigma2.m <- matrix(0, nrow = tt, ncol = 1)
sigma2.g <- matrix(0, nrow = tt, ncol = 1)
gamma1 <- matrix(0, nrow = tt, ncol = 1)
sigma2.p <- matrix(0, nrow = tt, ncol = 1)
sigma.2 <- matrix(0, nrow = tt, ncol = 1)
phi <- matrix(0.25, nrow = tt, ncol = 1)
alpha0[1] <- 0
gamma0[1] <- 0
beta0[1] <- 0
beta1[1] <- 1
alpha1[1] <- 1
gamma1[1] <- 1
sigma2.m[1] <- 1
sigma2.g[1] <- 1
sigma2.p[1] <- 1
sigma.2[1] <- 1
x <- matrix(0, nrow = n, ncol = tt)
#phi[1] <-  runif(1, A, B)
corr = 0.826
# Some helper functions
x.dist <- as.matrix(dist(coords))
minx = min(x.dist)
rangex = diff(range(x.dist))
x.dist <- apply(x.dist, MARGIN = 1, FUN = function(X) (X - minx)/rangex)
V <- function(phi) {return(exp(-x.dist/phi) + corr*diag(n))}
Sigma.inv <- function(sigma.2, V) {return(solve(sigma.2*V))}
# Simulate actual data here
beta0.a <- 1
beta1.a <- 3
alpha0.a <- 1
alpha1.a <- 3
gamma0.a <- 1
gamma1.a <- 3
phi.a <- 0.25
sigma2.a <- 6
sigma2g.a <- 5
sigma2m.a <- 4
sigma2p.a <- 8
x.a <- mvrnorm(mu = rep(0,n), Sigma = sigma2.a*exp(-x.dist/phi.a) )
x.m <- beta0.a + beta1.a*x.a + rnorm(nrow(M), mean = 0, sd = sqrt(sigma2m.a))
x.g <- alpha0.a + alpha1.a*x.a + rnorm(nrow(G), mean = 0, sd = sqrt(sigma2g.a))
x.p <- gamma0.a + gamma1.a*x.a + rnorm(nrow(P), mean = 0, sd = sqrt(sigma2p.a))
n.m <- length(x.m)
n.g <- length(x.g)
n.p <- length(x.p)
phi_target <- function(phi0, sigma2, x1, mu0){
if (phi0 >= A && phi0 <= B){
return((det(V(phi0))^-0.5) * exp(1/(2*sigma2) * (t(x1 - mu0) %*% solve(V(phi0)) %*% (x1 - mu0))))
}
return(0)
}
makeSymm <- function(m) {
m[upper.tri(m)] <- t(m)[upper.tri(m)]
return(m)
}
MH <- function(old, sigma2, x1, mu0) {
proposed <-  old + rnorm(1, mean=0, sd=phi_sd)
if ((proposed < A) | (proposed > B)){
return(old)
}
# print(proposed)
a = -1/(2*sigma2) * (t(x1 - mu0) %*% solve(V(proposed), (x1 - mu0)))
b = -1/(2*sigma2) * (t(x1 - mu0) %*% solve(V(old), x1 - mu0))
ratio <- min(1, sqrt(det(V(old)) / det(V(proposed))) * exp(a-b))
if((runif(1) <= ratio)) { return(proposed) }
return(old)
}
ptm <- proc.time()
for (i in 2:tt) {
x[,i] <- x.a
# Try for one timestep
# i=2
# mm <- beta1[i-1]/sigma2.m[i-1] * t(M) %*% (x.m - beta0[i-1])
# gg <- alpha1[i-1]/sigma2.g[i-1] * t(G) %*% (x.g - alpha0[i-1])
# pp <- gamma1[i-1]/sigma2.p[i-1] * t(P) %*% (x.p - gamma0[i-1])
# sinv <- Sigma.inv(sigma2.a, V(phi.a))
#
# mu.tilda <- mm + gg + pp
# print(mu.tilda[1:10])
# mm <- beta1[i-1]^2/sigma2.m[i-1] * (t(M) %*% M)
# gg <- alpha1[i-1]^2/sigma2.g[i-1] * (t(G) %*% G)
# pp <- gamma1[i-1]^2/sigma2.p[i-1] * (t(P) %*% P)
# Sigma.tilda <- makeSymm(solve(sinv + mm + gg + pp, tol = 1e-30))
# Sample x
# x[,i] <- mvrnorm(mu = Sigma.tilda %*% mu.tilda, Sigma = Sigma.tilda)
# print(x[1:5,i])
# Sample mu
# k <- n/sigma.2[i-1] + 1/w
#k <- rep(1,n) %*% sinv %*% matrix(rep(1,n), nrow = n, ncol = 1) #+ 1/w
#mu[i,] <- 0
#print(mu[i])
# Sample sigma.2
# bb <- 0.5*t(x[,i]) %*% solve(V(phi[i-1]), (x[,i])) + b
# sigma.2[i,] <- 1/rgamma(1, n/2 + a, bb)
# Sample sigma2.m, sigma2.g, sigma2.p
aa <- n.m/2 + a
bb <- b + 0.5*sum((x.m - beta0[i-1] - beta1[i-1]*x[,i])^2)
sigma2.m[i] <- 1/rgamma(1,aa,bb)
aa <- n.g/2 + a
bb <- b + 0.5*sum((x.g - alpha0[i-1] - alpha1[i-1]*x[,i])^2)
sigma2.g[i] <- 1/rgamma(1,aa,bb)
aa <- n.p/2 + a
bb <- b + 0.5*sum((x.p - gamma0[i-1] - gamma1[i-1]*x[,i])^2)
sigma2.p[i] <- 1/rgamma(1,aa,bb)
# Sample beta1
c.k <- 1/n.m * (t(x.m) %*% x[,i])
s.k <- 1/n.m * (t(x[,i]) %*% t(M) %*% M %*% x[,i])
eta.k <- n.m * s.k / sigma2.m[i] + 1/tau
mn <- n.m/sigma2.m[i] * (c.k - beta0[i-1]*mean(x[,i])) + 1/tau
beta1[i] <- rnorm(1, mean = mn / eta.k, sd = sqrt(1/eta.k))
# Sample alpha1
c.k <- 1/n.g * (t(x.g) %*% x[,i])
s.k <- 1/n.g * (t(x[,i]) %*% t(G) %*% G %*% x[,i])
eta.k <- n.g * s.k / sigma2.g[i] + 1/tau
mn <- n.g/sigma2.g[i] * (c.k - alpha0[i-1]*mean(x[,i])) + 1/tau
alpha1[i] <- rnorm(1, mean = mn / eta.k, sd = sqrt(1/eta.k))
# Sample gamma1
c.k <- 1/n.p * (t(x.p) %*% x[,i])
s.k <- 1/n.p * (t(x[,i]) %*% t(P) %*% P %*% x[,i])
eta.k <- n.p * s.k / sigma2.p[i] + 1/tau
mn <- n.p/sigma2.p[i] * (c.k - gamma0[i-1]*mean(x[,i])) + 1/tau
gamma1[i] <- rnorm(1, mean = mn / eta.k, sd = sqrt(1/eta.k))
# Sample beta0
rho.k <- n.m/sigma2.m[i] + 1/tau
mn <- n.m/sigma2.m[i]*(mean(x.m) - beta1[i]*mean(x[,i]))
beta0[i] <- rnorm(1, mean = mn/rho.k, sd = 1/sqrt(rho.k))
# Sample alpha0
rho.k <- n.g/sigma2.g[i] + 1/tau
mn <- n.g/sigma2.g[i]*(mean(x.g) - alpha1[i]*mean(x[,i]))
alpha0[i] <- rnorm(1, mean = mn/rho.k, sd = 1/sqrt(rho.k))
# Sample gamma0
rho.k <- n.p/sigma2.p[i] + 1/tau
mn <- n.p/sigma2.p[i]*(mean(x.p) - gamma1[i]*mean(x[,i]))
gamma0[i] <- rnorm(1, mean = mn/rho.k, sd = 1/sqrt(rho.k))
# Sample phi by Metropolis Hastings
#phi[i] <- MH(phi[i-1], sigma.2[i], x[,i], mu)
print(c(i, sigma2.a, phi.a))
}
par(mfrow = c(2,3))
plot(alpha0, type = "l")
plot(beta0,type="l")
plot(gamma0,type="l")
plot(alpha1,type="l")
plot(beta1,type="l")
plot(gamma1,type="l")
par(mfrow = c(2,2))
plot(sigma2.m,type="l")
plot(sigma2.g,type="l")
plot(sigma2.p,type="l")
mean(beta0[-(1:25000)])
mean(alpha0[-(1:25000)])
mean(gamma0[-(1:25000)])
mean(beta1[-(1:25000)])
mean(alpha1[-(1:25000)])
mean(gamma1[-(1:25000)])
mean(sigma2.m[-(1:25000)])
mean(sigma2.m[-(1:25000)])
mean(sigma2.g[-(1:25000)])
mean(sigma2.p[-(1:25000)])
#par(mfrow = c(2,1))
#plot(mu,type="l")
plot(sigma.2,type="l")
x.final <- apply(x[,25000:tt],1,mean)
#prob.map = pnorm(x.final)
hist(x.final-x.a)
par(mfrow = c(2,2))
plot(sigma2.m,type="l")
plot(sigma2.g,type="l")
plot(sigma2.p,type="l")
acf(sigma2.m[-(1:25000)])
acf(sigma2.m[-(1:25000)])
acf(sigma2.p[-(1:25000)])
acf(sigma2.g[-(1:25000)])
acf(alpha0[-(1:25000)])
acf(alpha1[-(1:25000)])
acf(beta1[-(1:25000)])
acf(beta0[-(1:25000)])
acf(gamma0[-(1:25000)])
acf(gamma1[-(1:25000)])
?acf
par(mfrow = c(2,3))
acf(alpha0[-(1:25000)])
#plot(coords[,1], coords[,2], col=colors, xlab="lat", ylab="lon", main="Probability map of Fructiosa ")
alpha0 = alpha0[-(1:25000)]
alpha1 = alpha1[-(1:25000)]
beta0 = beta0[-(1:25000)]
beta1 = beta1[-(1:25000)]
gamma0 = gamma0[-(1:25000)]
gamma1 = gamma1[-(1:25000)]
sigma2.g = sigma2.g[-(1:25000)]
sigma2.m = sigma2.m[-(1:25000)]
sigma2.p = sigma2.p[-(1:25000)]
par(mfrow = c(2,3))
acf(alpha0)
par(mfrow = c(2,3))
acf(alpha0)
acf(alpha1)
acf(beta0)
acf(beta1)
acf(gamma0)
acf(gamma1)
par(mfrow= c(2,2))
par(mfrow= c(2,2))
acf(sigma2.m)
acf(sigma2.g)
acf(sigma2.p)
alpha1[99990:100000]
length(alpha1)
alpha1[74990:75000]
cr <- colorRampPalette(c("black", "green"))
colors <- rgb(cr(prob.map / max(prob.map)), maxColorValue = 255)
cr <- colorRampPalette(c("black", "green"))
colors <- rgb(cr(x.p / max(x.p)), maxColorValue = 255)
